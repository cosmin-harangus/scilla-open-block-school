library OpenBlockScool

let one_msg =
  fun (msg: Message) =>
  let nil_msg = Nil {Message} in
  Cons {Message} msg nil_msg

(* error codes library *)
let code_success = Uint32 0
let code_course_not_found = Uint32 1
let code_not_authorized = Uint32 2
let code_invalid_params = Uint32 3
let code_courseid_exist = Uint32 4

(***************************************************)
(*             The contract definition             *)
(***************************************************)

contract OpenBookSchool
(owner: ByStr20,
schoolName: String)


field teachers: Map ByStr20 (Pair (String) (Uint32))
                = Emp ByStr20 (Pair (String) (Uint32))

field students: Map ByStr20 (Pair (String) (Uint32))
                = Emp ByStr20 (Pair (String) (Uint32))

field lastCourseID: Option Uint32 = None {Uint32}

field courseInventory: Map Uint32 (Pair (String) (String))
                    = Emp Uint32 (Pair (String) (String))



transition addTeacher(name: String, addr: ByStr20, memberType: Uint32)

    is_authorized = builtin eq _sender owner;
    match is_authorized with
    | True => 
        valid_type = let three = Uint32 3 in
                        builtin lt memberType three;
        match valid_type with
        | True =>
            mems <- teachers;
            p = Pair {(String) (Uint32)} name memberType;
            add_mem = builtin put mems addr p;
            teachers:= add_mem;

            msg = {_tag: "Main"; 
                    _recipient: _sender; 
                    _amount: Uint128 0; 
                    code: code_success};
            msgs = one_msg msg;
            send msgs 
        | False =>
            msg = {_tag: "Main";
                    _recipient: _sender;
                    _amount: Uint128 0;
                    code: code_invalid_params};
            msgs = one_msg msg;
            send msgs
        end
    | False =>
        (* Unauthorized transaction *)
        msg = {_tag: "Main";
                _recipient: _sender;
                _amount: Uint128 0;
                code: code_not_authorized};
        msgs = one_msg msg;
        send msgs
    end
end


transition addStudent(name: String, addr: ByStr20, memberType: Uint32)

    is_authorized = builtin eq _sender owner;
    match is_authorized with
    | True => 
        valid_type = let three = Uint32 3 in
                        builtin lt memberType three;
        match valid_type with
        | True =>
            mems <- students;
            p = Pair {(String) (Uint32)} name memberType;
            add_mem = builtin put mems addr p;
            students:= add_mem;

            msg = {_tag: "Main"; 
                    _recipient: _sender; 
                    _amount: Uint128 0; 
                    code: code_success};
            msgs = one_msg msg;
            send msgs 
        | False =>
            msg = {_tag: "Main";
                    _recipient: _sender;
                    _amount: Uint128 0;
                    code: code_invalid_params};
            msgs = one_msg msg;
            send msgs
        end
    | False =>
        (* Unauthorized transaction *)
        msg = {_tag: "Main";
                _recipient: _sender;
                _amount: Uint128 0;
                code: code_not_authorized};
        msgs = one_msg msg;
        send msgs
    end
end


transition addCourse(course_title: String, author: String, courseID: Uint32)

    courses <- courseInventory;

    courseExist = builtin contains courses courseID;
    match courseExist with
    | True =>
        msg = {_tag: "Main";
                    _recipient: _sender;
                    _amount: Uint128 0;
                    code: code_courseid_exist};
        msgs = one_msg msg;
        send msgs
    | False =>
        new_course = Pair {(String) (String)} course_title author;

        add_to_inventory = builtin put courses courseID new_course;

        courseInventory := add_to_inventory; 

        tmp = Some {Uint32} courseID;
        lastCourseID := tmp;

        msg = {_tag: "Main"; 
                _recipient: _sender; 
                _amount: Uint128 0; 
                code: code_success};

        msgs = one_msg msg;
        send msgs 
    end
end


transition removeCourse(course_id: Uint32)

    courses <- courseInventory;
    exist = builtin contains courses course_id;
    match exist with
    | False =>
        msg = {_tag: "Main"; 
                _recipient: _sender; 
                _amount: Uint128 0; 
                code: code_course_not_found};
        msgs = one_msg msg;
        send msgs
    | True =>
        removed = builtin remove courses course_id;
        courseInventory := removed;

        msg = {_tag: "Main"; 
            _recipient: _sender; 
            _amount: Uint128 0; 
            code: code_success};
        msgs = one_msg msg;
        send msgs
    end
end


transition updateCourse(course_id: Uint32, course_title: String, author: String)

    courses <- courseInventory;
    exist = builtin contains courses course_id;
    match exist with
    | False =>
         msg = {_tag: "Main"; 
                _recipient: _sender; 
                _amount: Uint128 0; 
                code: code_course_not_found};
        msgs = one_msg msg;
        send msgs
    | True =>
        new_course = Pair {(String) (String)} course_title author;

        add_to_inventory = builtin put courses course_id new_course;

        courseInventory := add_to_inventory; 

        msg = {_tag: "Main"; 
                _recipient: _sender; 
                _amount: Uint128 0; 
                code: code_success};
        msgs = one_msg msg;
        send msgs
    end


end
