library OpenBookScool

let one_msg =
  fun (msg: Message) =>
  let nil_msg = Nil {Message} in
  Cons {Message} msg nil_msg

(* error codes library *)
let code_success = Uint32 0
let code_book_not_found = Uint32 1
let code_not_authorized = Uint32 2
let code_invalid_params = Uint32 3
let code_bookid_exist = Uint32 4

(***************************************************)
(*             The contract definition             *)
(***************************************************)
contract OpenBookScool
(owner: ByStr20,
schoolName: String)


field teachers: Map ByStr20 (Pair (String) (Uint32))
                = Emp ByStr20 (Pair (String) (Uint32))

field students: Map ByStr20 (Pair (String) (Uint32))
                = Emp ByStr20 (Pair (String) (Uint32))

field lastCourseID: Option Uint32 = None {Uint32}

field courseInventory: Map Uint32 (Pair (String) (String))
                    = Emp Uint32 (Pair (String) (String))



transition addTeacher(name: String, addr: ByStr20, memberType: Uint32)

    is_authorized = builtin eq _sender owner;
    match is_authorized with
    | True => 
        valid_type = let three = Uint32 3 in
                        builtin lt memberType three;
        match valid_type with
        | True =>
            mems <- teachers;
            p = Pair {(String) (Uint32)} name memberType;
            add_mem = builtin put mems addr p;
            teachers:= add_mem;

            msg = {_tag: "Main"; 
                    _recipient: _sender; 
                    _amount: Uint128 0; 
                    code: code_success};
            msgs = one_msg msg;
            send msgs 
        | False =>
            msg = {_tag: "Main";
                    _recipient: _sender;
                    _amount: Uint128 0;
                    code: code_invalid_params};
            msgs = one_msg msg;
            send msgs
        end
    | False =>
        (* Unauthorized transaction *)
        msg = {_tag: "Main";
                _recipient: _sender;
                _amount: Uint128 0;
                code: code_not_authorized};
        msgs = one_msg msg;
        send msgs
    end
end


transition addStudent(name: String, addr: ByStr20, memberType: Uint32)

    is_authorized = builtin eq _sender owner;
    match is_authorized with
    | True => 
        valid_type = let three = Uint32 3 in
                        builtin lt memberType three;
        match valid_type with
        | True =>
            mems <- students;
            p = Pair {(String) (Uint32)} name memberType;
            add_mem = builtin put mems addr p;
            students:= add_mem;

            msg = {_tag: "Main"; 
                    _recipient: _sender; 
                    _amount: Uint128 0; 
                    code: code_success};
            msgs = one_msg msg;
            send msgs 
        | False =>
            msg = {_tag: "Main";
                    _recipient: _sender;
                    _amount: Uint128 0;
                    code: code_invalid_params};
            msgs = one_msg msg;
            send msgs
        end
    | False =>
        (* Unauthorized transaction *)
        msg = {_tag: "Main";
                _recipient: _sender;
                _amount: Uint128 0;
                code: code_not_authorized};
        msgs = one_msg msg;
        send msgs
    end
end


transition addCourse(book_title: String, author: String, bookID: Uint32)

    (* @dev: Preconditions can be set to allow only members to add a book *)
    (* @dev: Access controls logic omitted for brevity *)

    books <- courseInventory;
    (* new_book_id = let one = Uint32 1 in builtin add last_book_id one;*)

    bookExist = builtin contains books bookID;
    match bookExist with
    | True =>
        msg = {_tag: "Main";
                    _recipient: _sender;
                    _amount: Uint128 0;
                    code: code_bookid_exist};
        msgs = one_msg msg;
        send msgs
    | False =>
        (* Creating a new Book Model *)
        (* A new book model is a Pair of book_title and author *)
        new_book = Pair {(String) (String)} book_title author;

        (* Add the new book to the book_inventory Map, with BookID as the key*)
        add_to_inventory = builtin put books bookID new_book;

        (* Change mutable fields once everything has been completed. *)
        courseInventory := add_to_inventory; 

        tmp = Some {Uint32} bookID;
        lastCourseID := tmp;

        msg = {_tag: "Main"; 
                _recipient: _sender; 
                _amount: Uint128 0; 
                code: code_success};

        msgs = one_msg msg;
        send msgs 
    end
end

(* @notice: Allows a _sender to remove a book from the bookstore *)
(* @dev   : Access controls are omitted for brevity. In production contracts, *)
(*          you will want to implement proper access controls to allow only *)
(*          an owner or member to remove a book. *)

transition removeCourse(book_id: Uint32)
    (* @dev: Preconditions can be set to allow only members to remove a book *)
    (* @dev: Access controls logic omitted for brevity *)

    (* preconditions  *)
    books <- courseInventory;
    exist = builtin contains books book_id;
    match exist with
    | False =>
        msg = {_tag: "Main"; 
                _recipient: _sender; 
                _amount: Uint128 0; 
                code: code_book_not_found};
        msgs = one_msg msg;
        send msgs
    | True =>
        removed = builtin remove books book_id;
        courseInventory := removed;

        msg = {_tag: "Main"; 
            _recipient: _sender; 
            _amount: Uint128 0; 
            code: code_success};
        msgs = one_msg msg;
        send msgs
    end
end


transition updateCourse(book_id: Uint32, book_title: String, author: String)

    books <- courseInventory;
    exist = builtin contains books book_id;
    match exist with
    | False =>
         msg = {_tag: "Main"; 
                _recipient: _sender; 
                _amount: Uint128 0; 
                code: code_book_not_found};
        msgs = one_msg msg;
        send msgs
    | True =>
        new_book = Pair {(String) (String)} book_title author;

        add_to_inventory = builtin put books book_id new_book;

        bookInventory := add_to_inventory; 

        msg = {_tag: "Main"; 
                _recipient: _sender; 
                _amount: Uint128 0; 
                code: code_success};
        msgs = one_msg msg;
        send msgs
    end


end
